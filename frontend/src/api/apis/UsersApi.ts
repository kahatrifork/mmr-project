/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ViewCreateUser,
  ViewUserDetails,
} from '../models/index';
import {
    ViewCreateUserFromJSON,
    ViewCreateUserToJSON,
    ViewUserDetailsFromJSON,
    ViewUserDetailsToJSON,
} from '../models/index';

export interface V1UsersIdGetRequest {
    id: number;
}

export interface V1UsersPostRequest {
    user: ViewCreateUser;
}

export interface V1UsersSearchGetRequest {
    query: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Lists all users
     * List users
     */
    async v1UsersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ViewUserDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ViewUserDetailsFromJSON));
    }

    /**
     * Lists all users
     * List users
     */
    async v1UsersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ViewUserDetails>> {
        const response = await this.v1UsersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user by ID
     * Get user
     */
    async v1UsersIdGetRaw(requestParameters: V1UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewUserDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1UsersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewUserDetailsFromJSON(jsonValue));
    }

    /**
     * Get user by ID
     * Get user
     */
    async v1UsersIdGet(requestParameters: V1UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewUserDetails> {
        const response = await this.v1UsersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new user
     * Create user
     */
    async v1UsersPostRaw(requestParameters: V1UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ViewUserDetails>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling v1UsersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ViewCreateUserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewUserDetailsFromJSON(jsonValue));
    }

    /**
     * Creates a new user
     * Create user
     */
    async v1UsersPost(requestParameters: V1UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ViewUserDetails> {
        const response = await this.v1UsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches users by name
     * Search users
     */
    async v1UsersSearchGetRaw(requestParameters: V1UsersSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ViewUserDetails>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling v1UsersSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ViewUserDetailsFromJSON));
    }

    /**
     * Searches users by name
     * Search users
     */
    async v1UsersSearchGet(requestParameters: V1UsersSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ViewUserDetails>> {
        const response = await this.v1UsersSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
